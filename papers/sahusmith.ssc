table1 <- function() {
# This will re-produce Table 1 in the paper. 

   cat("M(eta)=", 0.25, "\n")
   u <- table.norm(meta=0.25) 
   cat("M(eta)=", 0.15, "\n")
   u <- table.norm(meta=0.15)
   cat("M(eta)=", 0.10, "\n")
   u <- table.norm(meta=0.10)
 
cat("Table 1 done\n")
}
 

table.norm  <- function(meta = 0.25, maxn=2000, theta0=0, sigma=2, eta=0.5)
{
       ns <- c(200, 111, 100, 50, 25, 16, 4, 1) 
       mus <- c(-0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
        
        r1 <- length(ns)
        c1 <- length(mus)
        dn <- matrix(NA, nrow = r1, ncol = c1)
        for(i in 1:r1) {
                for(j in 1:c1) {
                     p <- justone.norm(meta=meta, ns = ns[i], mus = mus[j], nf=ns[i], muf=mus[j], 
                         eta=eta, sigma=sigma, theta0 = theta0,  maxn = maxn)
                      dn[i, j] <- p
                }
        } 
        dn <- as.data.frame(dn)
        dimnames(dn) <- list(as.character(ns), as.character(mus))
        print(dn)
        dn 

}

justone.norm <- function(meta=0.15, ns=200, nf=ns, mus=-0.1, muf=mus, eta=0.5, sigma=2, theta0 = 0, maxn = 1000)
{
        n <- 1
        u <- prob.norm(n=n, sprior.n=ns, mus =mus, fprior.n=nf, 
               muf = muf,  eta=eta, sigma=sigma, theta0=theta0)
        if (u < meta )  {
              #  cat("n=", n, "does the job", "u=", u, "\n")
                n <- n+1
        }
        else {
                n <- maxn
                u <- prob.norm(n=n, sprior.n=ns, mus =mus, fprior.n=nf, 
               muf = muf,  eta=eta, sigma=sigma, theta0=theta0)
                if (u <= meta ) {
                        nupper <- n
                        nlower <- 1
                        b <- 0
                        repeat {
                                n <- round((nupper + nlower)/2)
                                u <- prob.norm(n=n, sprior.n=ns, mus =mus, fprior.n=nf, 
               muf = muf,  eta=eta, sigma=sigma, theta0=theta0)
                                if (u <= meta )  nupper <- n
                                else nlower <- n
                                u <- abs(nupper - nlower)
                                if(u < 2)
                                        break
                        }
                } else {
                        cat("It is not possible with maxn=", maxn, "\n")
                        cat("You need to increase maxn\n")
                        n <- maxn + 1
                }
        }
        n
}

prob.norm <- function(n = 10, sprior.n=111, mus =0.0, fprior.n=sprior.n, 
               muf = mus,  eta=0.5, sigma=2, theta0=0)
{
        # Calculates the sum of two error probabilities under the normal/normal model
        # Inputs are:
        # (1) n: is the trial sample size
        # (2) sprior.n = sampling prior sample size
        # (3) mus  = sampling prior mean
        # (4) fprior.n = fitting prior sample size
        # (5) muf  = fitting prior mean
        # (6) eta = L0/(L0+L1)
        # (7) theta0= null hypothesis
  
       # print(list(n=n,   sprior.n=sprior.n, mus =mus, fprior.n=fprior.n, 
       #      muf = muf,  eta=eta, sigma=sigma, theta0=theta0))

        ks <- sqrt(1/sprior.n)
        kf <- sqrt(1/fprior.n)
        q1 <- qnorm(eta)
  
        tauf <- kf * sigma 
        taus <- ks * sigma

        sd <- sigma/sqrt(n) 
        lamf <- 1.0/sd^2 + 1.0/tauf^2 
        lamf <- 1.0/lamf
  
        kn <- (theta0 - q1 * sqrt(lamf))/lamf - muf/tauf^2 
        kn <-  kn * sd^2  
  
        rho <- 1+sd^2/taus^2
        rho <- 1/sqrt(rho)

        a <- (theta0 - mus)/taus 
        b <-  (kn - mus)/sd
        b <- b/sqrt(1+ (taus/sd)^2)
        an1 <- pmvnorm(c(-a, b), rho = -rho)
        an2 <- pmvnorm(c(a, -b), rho = -rho)
        an1+an2
       
}


